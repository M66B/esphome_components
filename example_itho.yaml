substitutions:
  device_name: test
  friendly_name: Test

esphome:
  name: $device_name

esp32:
  board: esp32dev
  framework:
    type: arduino
    
external_components:
- source: github://hencou/esphome_components
  components: [itho]
    
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

logger:
  level: INFO

api:
 reboot_timeout: 480min

ota:
  - platform: esphome

light:
  - platform: status_led
    name: "Status LED"
    id: board_status_led
    pin:
      number: 17
      inverted: true
    entity_category: diagnostic

itho:
  syssht30: disable       ##Optional, default enabled: enable or disable Itho build in sensor and automation, set to disable when using own automation logic
  syssht30_address: 0x44  ##Optional, default 0x44, I2C SHT30 sensor address
  sda: 21                 ##Optional, default to default SDA pin of ESP module (21)
  scl: 22                 ##Optional, default to default SCL pin of ESP module (22)

fan:
- platform: itho
  id: itho_fan
  name: $friendly_name
  
select:
- platform: itho
  name: ${friendly_name} stand
  id: itho_select
  on_value:
    then:
    - globals.set:
        id: faninfo
        value: !lambda |-
          return x.c_str();

globals:
- id: humidity_mean
  type: float

- id: humidity_count
  type: int

- id: max_speed
  type: bool

- id: old_e_term
  type: float

- id: e_term
  type: float
  
- id: p_term
  type: float
  
- id: i_term
  type: float
  
- id: d_term
  type: float
  
- id: o_term
  type: float
  
- id: faninfo
  type: std::string
  
number:
- platform: template
  name: $friendly_name minimum output
  id: minimal_output
  entity_category: config
  icon: mdi:chart-bell-curve
  restore_value: true
  initial_value: 15.0
  optimistic: true
  min_value: 10
  max_value: 30
  step: 1
  
- platform: template
  name: $friendly_name Kp
  id: kp
  entity_category: config
  icon: mdi:chart-bell-curve
  restore_value: true
  initial_value: 5.0
  optimistic: true
  min_value: 0
  max_value: 10
  step: 0.1

- platform: template
  name: $friendly_name Ki
  id: ki
  entity_category: config
  icon: mdi:chart-bell-curve
  restore_value: true
  initial_value: 0.0125
  optimistic: true
  min_value: 0
  max_value: 0.05
  step: 0.0001

- platform: template
  name: $friendly_name max i term
  id: max_i_term
  entity_category: config
  icon: mdi:chart-bell-curve
  restore_value: true
  initial_value: 30
  optimistic: true
  min_value: 0
  max_value: 50
  step: 1

- platform: template
  name: $friendly_name Kd
  id: kd
  entity_category: config
  icon: mdi:chart-bell-curve
  restore_value: true
  initial_value: 4.0
  optimistic: true
  min_value: 0
  max_value: 10
  step: 0.1
  
sensor:
- platform: itho
  update_interval: 8s
  temperature:
    name: ${friendly_name} temperatuur
    filters:
    - or:
      - delta: 1.0
      - heartbeat: 60s
  humidity:
    name: ${friendly_name} luchtvochtigheid
    filters:
    - or:
      - delta: 1.0
      - heartbeat: 60s
    id: "humidity"
    on_raw_value:
      if:
        condition:
          sensor.in_range:
            id: humidity
            above: 0.1
            below: 120.0
        then:
        - globals.set:
            id: humidity_mean
            value:  !lambda |-
              id(humidity_count) = id(humidity_count) + 1;
              if (id(humidity_count) > 1000) { id(humidity_count) = 1000;}
              return (((id(humidity_count)-1) * id(humidity_mean)) + x) / id(humidity_count);
        - globals.set:
            id: e_term
            value: !lambda |-
              return x - id(humidity_mean) - 2.0;
        - globals.set:
            id: p_term
            value: !lambda |-
              return id(e_term) * id(kp).state;
        - globals.set:
            id: i_term
            value: !lambda |-
              float value = id(i_term) + (id(e_term) * id(ki).state);
              if (value > id(max_i_term).state) {value = id(max_i_term).state;}
              if (value < 0) {value = 0;}
              return value;
        - globals.set:
            id: d_term
            value: !lambda |-
              float value = (id(e_term) - id(old_e_term)) * id(kd).state;
              return value;
        - globals.set:
            id: old_e_term
            value: !lambda |-
              return id(e_term);
        - globals.set:
            id: o_term
            value: !lambda |-
              float value = id(p_term) + id(i_term) + ((id(d_term) < 0)? 0 : id(d_term));
              value = (id(o_term) < value) ? value : id(o_term) -1; //Fast speed up, slow speed down
              return (value < id(minimal_output).state) ? id(minimal_output).state : value;
        - lambda: !lambda |-
            if (id(faninfo) == "auto") {
              int speed = 0;

              if (x > 87.00 && id(max_speed) == false) {
                id(max_speed) = true;
                speed = 254;

                auto call = id(itho_fan).make_call();
                call.set_speed(speed);
                call.perform();
              }

              if (x <= 87.00) {
                if (x < 80.00) {
                  id(max_speed) = false;
                  speed = int(id(o_term) * 2.54);
                } else {
                  if (id(max_speed) == true) {
                    speed = 254;
                  } else {
                    speed = int(id(o_term) * 2.54);
                  }
                }

                if (speed > 254) {speed = 254;}
                auto call = id(itho_fan).make_call();
                call.set_speed(speed);
                call.perform();
              }
            }
  fan_setpoint:
    name: ${friendly_name} fan setpoint
    filters:
    - or:
      - delta: 1.0
      - heartbeat: 60s
  fan_speed:
    name: ${friendly_name} fan speed
    filters:
    - or:
      - delta: 1.0
      - heartbeat: 60s

- platform: template
  name: ${friendly_name} gem. luchtvochtigheid
  unit_of_measurement: "%"
  lambda: !lambda |-
    return id(humidity_mean);

- platform: template
  name: $friendly_name error value
  lambda: !lambda |-
    return id(e_term);
  
- platform: template
  name: $friendly_name p term
  lambda: !lambda |-
    return id(p_term);

- platform: template
  name: $friendly_name i term
  lambda: !lambda |-
    return id(i_term);

- platform: template
  name: $friendly_name d term
  id: d_term_t
  lambda: !lambda |-
    return id(d_term);

- platform: template
  name: $friendly_name output term
  lambda: !lambda |-
    return id(o_term);
        
- platform: uptime
  name: ${friendly_name} uptime
  filters:
    - throttle: 300s

- platform: wifi_signal
  name: ${friendly_name} WiFi signaal
  filters:
    - delta: 0.01
    - throttle: 300s
    
binary_sensor:
- platform: analog_threshold
  name: ${friendly_name} douchen
  sensor_id: d_term_t
  threshold:
    upper: 5
    lower: -1.4
        
button:
- platform: restart
  entity_category: config
  name: ${friendly_name} restart
- platform: safe_mode
  entity_category: config
  name: ${friendly_name} safemode
- platform: factory_reset
  name: ${friendly_name} factory reset
  entity_category: config

text_sensor:
- platform: version
  name: ${friendly_name} ESPHome versie

- platform: wifi_info
  ip_address:
    name: ${friendly_name} ipadres
  ssid:
    name: ${friendly_name} SSID
  bssid:
    name: ${friendly_name} BSSID
